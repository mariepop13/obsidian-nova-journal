name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
      actions: read               # Required for MCP GitHub server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Custom instructions for Claude to customize its behavior for your project
          prompt: |
            Follow clean code principles:
            - SOLID patterns, dependency injection, composition over inheritance
            - Functions ‚â§35 lines, ‚â§3 parameters, single responsibility
            - Early returns (guard clauses), ‚â§2 nesting levels, complexity ‚â§10
            - camelCase variables/functions, PascalCase classes/types
            - No var, prefer const, no magic numbers, template literals
            
            Security standards:
            - NEVER hardcode secrets, validate ALL inputs, sanitize data
            - Use principle of least privilege for permissions
            - No sensitive data in logs, actionable context only
            
            Quality standards:
            - Test coverage ‚â•80% for new code
            - Files ‚â§400 lines, one main responsibility, 1-3 exports max
            - Self-documenting code with clear names, no inline comments
            - Layer separation: UI ‚Üí Domain ‚Üí Data
            
            Git standards:
            - Gitmoji conventions (‚ú® feat, üêõ fix, üîß config)
            - Atomic commits, no secrets/TODOs/debug code
          
          use_sticky_comment: true
          

